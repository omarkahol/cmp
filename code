matrix_t cmp::gp::fast_reduced_covariance_matrix(std::vector<Eigen::VectorXd> x_pts, Eigen::LDLT<matrix_t> const &ldlt, Eigen::VectorXd par) const
{   

    size_t n_obs = m_x_obs.size();
    size_t n_pts = x_pts.size();

    Eigen::MatrixXd In = Eigen::MatrixXd::Identity(n_obs,n_obs);

    // Fill the two matrices
    Eigen::MatrixXd k_star = Eigen::MatrixXd::Zero(n_obs, n_pts);
    Eigen::MatrixXd k_star_sel = Eigen::MatrixXd::Zero(n_obs+1, n_pts);
    for (size_t i = 0; i < n_pts; i++) {
        for (size_t j = 0; j <n_obs; j++) {
            k_star(j, i) = m_kernel(m_x_obs[j], x_pts[i], par);
            k_star_sel(j, i) = k_star(j, i);
        }
    }
    Eigen::VectorXd KtCK_diag = Eigen::VectorXd::Zero(n_pts);
    for (size_t i = 0; i < n_pts; i++) {
        for (size_t m = 0; m < n_obs; m++) {
            for (size_t l=0; l < n_obs; l++) {
                KtCK_diag(i) += k_star(l, i)*ldlt.solve(In)(l,m)*k_star(m,i);
            }
        }
    }

    // Select, at turns, a new point from the observations 
    Eigen::MatrixXd vij = Eigen::MatrixXd::Zero(n_pts, n_pts);
    for (size_t sel = 0; sel<n_pts; sel++) {

        // Select the new point
        Eigen::VectorXd x_sel = x_pts[sel];

        // Compute Q, right upwards block of the new covariance matrix
        Eigen::VectorXd Q = Eigen::VectorXd::Zero(n_obs);
        for (size_t i = 0; i < n_obs; i++) {
            Q(i) = m_kernel(m_x_obs[i], x_sel, par);
        }

        // Solve the first system of equations
        Eigen::VectorXd Q_sol = ldlt.solve(Q);

        // Compute the inverse of the covariance, adding the new point, using the block matrix inversion formulae
        Eigen::MatrixXd A_inv = Eigen::MatrixXd::Zero(n_obs+1, n_obs+1);
        A_inv(n_obs, n_obs) = 1.0/(m_kernel(x_sel, x_sel, par)-Q.dot(Q_sol)); // Lower corner block, S_tilde in Rasmussen
        A_inv.block(0,n_obs,n_obs,1) =  -A_inv(n_obs, n_obs)*Q_sol;  // Upper row right block, Q_tilde in Rasmussen
        A_inv.block(n_obs,0,1,n_obs) = A_inv.block(0,n_obs,n_obs,1).transpose(); // Lower row left block, R_tilde in Rasmussen
        A_inv.block(0,0,n_obs,n_obs) = ldlt.solve(In) + A_inv(n_obs, n_obs)*ldlt.solve(Q*Q.transpose()*ldlt.solve(In)); // Upper left block, P_tilde in Rasmussen

        // Fill the last row of the k_star matrix
        for (size_t i = 0; i < n_pts; i++) {
            k_star_sel(n_obs, i) = m_kernel(x_pts[i], x_sel, par);
        }

        // Compute the diagonal component of [K_star]^T A [K_star]
        Eigen::VectorXd KtAK_diag = Eigen::VectorXd::Zero(n_pts);
        for (size_t i = 0; i < n_pts; i++) {
            for (size_t m = 0; m < n_obs+1; m++) {
                for (size_t l=0; l<n_obs+1; l++) {
                    KtAK_diag(i) += k_star_sel(l, i)*A_inv(l,m)*k_star_sel(m,i);
                }
            }
        }

        // Compute the matrix row
        vij.row(sel) = -KtCK_diag + KtAK_diag;
    }

    return vij;

}



// New code

#pragma omp parallel
    for (size_t sel = 0; sel<n_pts; sel++) {

        // Initialize private members
        Eigen::VectorXd Q(n_obs);
        Eigen::MatrixXd alpha = Eigen::MatrixXd::Zero(n_obs+1,n_pts);
        Eigen::VectorXd KtAK_diag = Eigen::VectorXd::Zero(n_pts);

        // Compute Q, Refer to Rasmussen for the notation
        for (size_t i = 0; i < n_obs; i++) {
            Q(i) = m_kernel(m_x_obs[i], x_pts[sel], par);
        }

        // Fill the last row of the k_star matrix, for the new selected point
        for (size_t i=0; i<n_pts; i++) {
            k_star_row(i) = m_kernel(x_pts[i], x_pts[sel], par);
        }

        // Compute additional terms
        Eigen::VectorXd Q_sol = ldlt.solve(Q);
        M = 1.0/(m_kernel(x_pts[sel], x_pts[sel], par)-Q.dot(Q_sol));

        /*
            Alpha is the solution of [K_aug] alpha = [K_star]
            We will compute it using the block-matrix inversion formulas from Rasmussen
        */
        alpha.block(0,0,n_obs,n_pts) = K_sol + M*Q_sol*(Q.transpose()*K_sol);
        
        // Deal with the last row of alpha
        for (size_t j=0; j<n_pts; j++) {
            for (size_t l=0; l<n_obs; l++) {
                alpha(n_obs,j) -= M*Q_sol(l)*k_star(l,j);
                alpha(l,j) -= M*Q_sol(l)*k_star_row(j);
            }
            alpha(n_obs,j) += M*k_star_row(j);
        }

        
        
        // Compute the diagonal component of [K_star]^T A [K_star]
        for (size_t i = 0; i < n_pts; i++) {
            for (size_t l = 0; l<n_obs; l++) {
                KtAK_diag(i) += k_star(l, i)*alpha(l,i);
            }
            KtAK_diag(i) += k_star_row(i)*alpha(n_obs,i);
        }

        // Compute the matrix row
        vij.row(sel).array() = (-KtCK_diag + KtAK_diag).array();
    }

    return vij;